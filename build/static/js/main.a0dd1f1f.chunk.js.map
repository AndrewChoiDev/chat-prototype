{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","ChatRoom","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","currentUser","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","map","msg","ChatMessage","message","id","onSubmit","value","onChange","target","type","props","className","src","SignIn","onClick","provider","GoogleAuthProvider","signInWithPopup","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAUAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,2DACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YAgB3B,SAASC,IACP,IAAMC,EAAcF,EAAUG,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAErD,EAAmBC,YAAkBH,EAAO,CAACI,QAAS,OAA/CC,EAAP,oBAEA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAW,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAGMjB,EAAKkB,YAAtBC,EAHW,EAGXA,IAAKC,EAHM,EAGNA,SAHM,SAKZjB,EAAYkB,IAAI,CACpBC,KAAMV,EACNW,UAAWjC,IAASW,UAAUuB,WAAWC,kBACzCN,MACAC,aATgB,OAYlBP,EAAa,IAZK,2CAAH,sDAejB,OACE,qCACE,8BACGH,GAAYA,EAASgB,KAAI,SAAAC,GAAG,OAAI,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,SAGzD,uBAAMC,SAAUjB,EAAhB,UACE,uBAAOkB,MAAOpB,EAAWqB,SAAU,SAAClB,GAAD,OAAMF,EAAaE,EAAEmB,OAAOF,UAC/D,wBAAQG,KAAK,SAAb,wBAMR,SAASP,EAAYQ,GACnB,MAA8BA,EAAMP,QAA7BP,EAAP,EAAOA,KAAMH,EAAb,EAAaA,IAAKC,EAAlB,EAAkBA,SACWpB,EAAKkB,YAAYC,IAE9C,OACE,sBAAKkB,UAAW,0BAAhB,UACE,qBAAKC,IAAKlB,IACV,4BAAIE,OAIV,SAASiB,IAMP,OACE,wBAAQC,QANe,WACvB,IAAMC,EAAW,IAAInD,IAASU,KAAK0C,mBACnC1C,EAAK2C,gBAAgBF,IAIrB,iCAcWG,MAnFf,WACE,MAAeC,YAAa7C,GAArB8C,EAAP,oBAEA,OACE,sBAAKT,UAAU,MAAf,UACE,wBAAQA,UAAU,eAElB,kCACGS,EAAO,cAAC5C,EAAD,IAAc,cAACqC,EAAD,UCpBfQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a0dd1f1f.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\nimport './App.css';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBTbV-ptwnWpqSlR0_ccklfHFnzFyazie8\",\n  authDomain: \"chat-prototype-ea6c5.firebaseapp.com\",\n  databaseURL: \"https://chat-prototype-ea6c5-default-rtdb.firebaseio.com\",\n  projectId: \"chat-prototype-ea6c5\",\n  storageBucket: \"chat-prototype-ea6c5.appspot.com\",\n  messagingSenderId: \"489572636556\",\n  appId: \"1:489572636556:web:36b3cf799c880d8bfea8a9\",\n  measurementId: \"G-4CWLH14ZE2\"\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <section>\n        {user ? <ChatRoom/> : <SignIn/>}\n      </section>\n    </div>\n  );\n}\n\nfunction ChatRoom() {\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, {idField: 'id'});\n\n  const [formValue, setFormValue] = useState('');\n\n  const sendMessage = async(e) => {\n    e.preventDefault();\n\n    const {uid, photoURL} = auth.currentUser;\n    \n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    });\n\n    setFormValue('');\n  };\n  \n  return (\n    <>\n      <div>\n        {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg}/>)}\n      </div>\n\n      <form onSubmit={sendMessage}>\n        <input value={formValue} onChange={(e)=> setFormValue(e.target.value)} />\n        <button type=\"submit\">Send</button>\n      </form>\n    </>\n  )\n}\n\nfunction ChatMessage(props) {\n  const {text, uid, photoURL} = props.message;\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n    <div className={'message ${messageClass}'}>\n      <img src={photoURL}/>\n      <p>{text}</p>\n    </div>\n  );\n}\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <button onClick={signInWithGoogle}>\n      Sign in with Google\n    </button>\n  );\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button onClick={() => auth.signOut()}>\n      Sign Out\n    </button>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}